
######### Import bibliotek #########

import pandas as pd
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt

######### Odczyt danych #########
wine_data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data')

######### Przetwarzanie danych danych #########
wine_names = ['Class', 'Alcohol', 'Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium', 'Total phenols', \
              'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins', 'Color intensity', 'Hue', 'OD280/OD315',\
              'Proline']

wine_data.columns =wine_names
wine_df = pd.DataFrame(wine_data)
wine_df.Class = wine_df.Class - 1
wine_df.head()


######### Budowa modelu #########
from sklearn.model_selection import train_test_split

Y = wine_df.loc[:,'Class'].values
X = wine_df.loc[:,'Alcohol':'Proline'].values

######### TEST I TRAIN #########
train_x, test_x, train_y, test_y = train_test_split(X,Y , test_size=0.3, random_state=0)

clf = LogisticRegression(solver='lbfgs',multi_class='multinomial')
clf.fit(train_x, train_y)

######### Podział danych #########
from collections import Counter
print(Counter(Y))

######### Walidajca #########
from numpy import mean
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.linear_model import LogisticRegression

model = LogisticRegression(multi_class='multinomial', solver='lbfgs')
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
ores
n_scores = cross_val_score(model, X, Y, scoring='accuracy', cv=cv, n_jobs=-1)
print('Mean Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))

######### Predykcja na podstawie przykładowego zbioru danych #########
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression

model.fit(X, Y)
row = [13.16,2.36,2.67,18.6,101,2.80,3.24,0.30,2.81,5.68,1.03,3.17,1185]
yhat = model.predict([row])
print('Predicted Class: %d' % yhat[0])

######### Opis prawdopodobieństw #########
yhat1 = model.predict_proba([row])
yhat2= yhat.reshape(-1,1)

print(f'Prawdopodobieństwo 0 wynosi: {round(yhat2[0,0], 3)}')  
print(f'Prawdopodobieństwo 1 wynosi: {round(yhat2[1,0], 3)}')
print(f'Prawdopodobieństwo 2 wynosi: {round(yhat2[2,0], 3)}')
